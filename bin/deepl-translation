#!/usr/bin/env raku
use v6.d;

use Lingua::Translation::DeepL;

my %*SUB-MAIN-OPTS =
        :named-anywhere,
        # allow named variables at any location
        ;

#| Text translation using the DeepL API.
multi sub MAIN(
        Str $text is copy,                        #= Text to be translated. If a file name, its content is used.
        Str :f(:$from-lang) is copy = 'Whatever', #= Source language.
        Str :t(:$to-lang) is copy = 'English',    #= Target language.
        Str :a(:$auth-key) is copy = 'Whatever',  #= Authorization key (to use DeepL API.)
        Str :$formality is copy = 'Whatever',     #= Language formality in the translated text; one of ('more', 'less', 'prefer_more', 'prefer_less', 'default', or 'Whatever'.)
        Str :$tag-handling is copy = 'Whatever',  #= Tag handling spec; one of ('xml', 'html', 'default', or 'Whatever'.)
        UInt :$timeout= 10,                       #= Timeout.
        Str :$format is copy = 'json',            #= Format of the result; one of "json", "hash", or "text".
               ) {

    if $auth-key eq 'Whatever' {
        if %*ENV<DEEPL_AUTH_KEY>:exists {
            $auth-key = %*ENV<DEEPL_AUTH_KEY>;
        } else {
            note 'Cannot find DeepL authorization key. ' ~
                    'Please provide a valid key to the argument auth-key, or set the ENV variable DEEPL_AUTH_KEY.';
            $auth-key = ''
        }
    }

    if $text.IO.e { $text = slurp($text); }

    my $res =
            deepl-translation($text,
                    from-lang => $from-lang eq 'Whatever' ?? Whatever !! $from-lang,
                    :$to-lang,
                    :$auth-key,
                    :$formality,
                    :$tag-handling,
                    :$timeout,
                    format => ($format.lc ∈ <values value text> ?? 'hash' !! $format)
            );

    given $format.lc {
        when $_ ∈ <hash raku> { say $res.raku; }
        when $_ ∈ <values value text> {
            if $res ~~ Iterable && $res.elems > 0 && $res.head ~~ Map && ($res.head<text>:exists) {
                say $res.head<text>;
            } else {
                say $res.raku;
            }
        }
        default { say $res; }
    }
}

multi sub MAIN
#= Command given as a sequence of words.
(*@words,
 Str :f(:$from-lang) is copy = 'Whatever', #= Source language.
 Str :t(:$to-lang) is copy = 'English',    #= Target language.
 Str :a(:$auth-key) is copy = 'Whatever',  #= Authorization key (to use DeepL API.)
 Str :$formality is copy = 'Whatever',     #= Language formality in the translated text; one of ('more', 'less', 'prefer_more', 'prefer_less', 'default', or 'Whatever'.)
 Str :$tag-handling is copy = 'Whatever',  #= Tag handling spec; one of ('xml', 'html', 'default', or 'Whatever'.)
 UInt :$timeout= 10,                       #= Timeout.
 Str :$format is copy = 'json',            #= Format of the result; one of "json", "hash", or "text".
 ) {
    return MAIN(@words.join(' ').Str, :$from-lang, :$to-lang, :$auth-key, :$formality, :$format, :$tag-handling,
            :$timeout, :$format);
}